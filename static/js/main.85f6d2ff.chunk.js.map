{"version":3,"sources":["components/Spinner.js","components/HOC.js","components/MovieList.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","react_default","a","createElement","src","HOC","WrappedComponent","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","timeup","setTimeout","setState","console","log","inherits","createClass","key","value","components_Spinner","React","Component","List","id","name","rate","image","map","el","i","className","APP","components_MovieList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMASeA,EARC,WACd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAI,sDC2BAC,EA5BH,SAAAC,GACV,gBAAAC,GACE,SAAAF,EAAYG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAP,IACjBI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAL,GAAAU,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAAQ,GAGVC,WACE,kBACET,EAAKU,SAAS,CACZF,QAAQ,KAEZ,MAEFG,QAAQC,IAAIZ,EAAKO,MAAMC,QAbNR,EADrB,OAAAC,OAAAY,EAAA,EAAAZ,CAAAL,EAAAE,GAAAG,OAAAa,EAAA,EAAAb,CAAAL,EAAA,EAAAmB,IAAA,SAAAC,MAAA,WAkBI,OAAOb,KAAKI,MAAMC,OAChBhB,EAAAC,EAAAC,cAACuB,EAAD,MAEAzB,EAAAC,EAAAC,cAACG,EAAqBM,KAAKJ,WArBjCH,EAAA,CAAyBsB,IAAMC,YCA3BC,QAAO,CACX,CACEC,GAAI,SACJC,KAAM,cACNC,KAAM,iCACNC,MACE,gGAEJ,CACEH,GAAI,SACJC,KAAM,UACNC,KAAM,iCACNC,MAAO,4DAET,CACEH,GAAI,SACJC,KAAM,SACNC,KAAM,iCACNC,MACE,6EAmBS5B,IAfG,SAAAG,GAChB,OACEP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBACC0B,EAAKK,IAAI,SAACC,EAAIC,GAAL,OACRnC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,UACbpC,EAAAC,EAAAC,cAAA,mBAAWgC,EAAGL,GAAd,KACA7B,EAAAC,EAAAC,cAAA,qBAAagC,EAAGJ,KAAhB,KACA9B,EAAAC,EAAAC,cAAA,uBAAegC,EAAGH,KAAlB,KACA/B,EAAAC,EAAAC,cAAA,OAAKC,IAAK+B,EAAGF,cCrBRK,mLARX,OACErC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,OACfpC,EAAAC,EAAAC,cAACoC,EAAD,cALYX,aCQEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.85f6d2ff.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Spinner = () => {\r\n  return (\r\n    <div>\r\n      <img src=\"https://hover.hillsclerk.com/images/loading.gif\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;","import React from \"react\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nconst HOC = WrappedComponent => {\r\n  return class HOC extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        timeup: true\r\n      };\r\n\r\n      setTimeout(\r\n        () =>\r\n          this.setState({\r\n            timeup: false\r\n          }),\r\n        1500\r\n      );\r\n      console.log(this.state.timeup);\r\n    }\r\n\r\n    render() {\r\n      return this.state.timeup ? (\r\n        <Spinner />\r\n      ) : (\r\n        <WrappedComponent {...this.props} />\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nexport default HOC;\r\n","import React from \"react\";\r\nimport HOC from \"./HOC\";\r\nimport \"../App.css\";\r\n\r\nconst List = [\r\n  {\r\n    id: \"Movie1\",\r\n    name: \"The Lullaby\",\r\n    rate: \"★★★★☆\",\r\n    image:\r\n      \"https://horrornews.net/wp-content/uploads/2018/02/The-Lullaby-2018-movie-Darrell-Roodt-2.jpg\"\r\n  },\r\n  {\r\n    id: \"Movie2\",\r\n    name: \"Laraide\",\r\n    rate: \"★★★☆☆\",\r\n    image: \"http://www.laraider.com/films/filmtr3/promo/affiche3.jpg\"\r\n  },\r\n  {\r\n    id: \"Movie3\",\r\n    name: \"Braven\",\r\n    rate: \"★★☆☆☆\",\r\n    image:\r\n      \"https://media.senscritique.com/media/000017581368/source_big/Braven.jpg\"\r\n  }\r\n];\r\n\r\nconst MovieList = props => {\r\n  return (\r\n    <div>\r\n      <h1>MOVIES LIST</h1>\r\n      {List.map((el, i) => (\r\n        <div className=\"movies\">\r\n          <h4> Id : {el.id} </h4>\r\n          <h4> Name : {el.name} </h4>\r\n          <h4> Rating : {el.rate} </h4>\r\n          <img src={el.image} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nexport default HOC(MovieList);\r\n","import React, { Component } from 'react';\nimport MovieList from \"./components/MovieList\";\nimport './App.css';\n\nclass APP extends Component {\n \n  render() { \n    return (\n      <div className=\"App\">\n      <MovieList />\n      </div>\n      );\n  }\n}\n \nexport default APP;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}